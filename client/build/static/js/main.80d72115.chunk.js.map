{"version":3,"sources":["components/SearchBar.js","components/BookInfo.js","components/Search.js","components/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["SearchBar","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","text","setText","react_default","a","createElement","onSubmit","e","preventDefault","console","log","handleSearch","type","value","onChange","target","BookInfo","saved","setSaved","title","author","description","src","image","id","onClick","onClickView","infoType","disabled","data","_id","authors","link","axios","post","then","res","saveBook","onClickDelete","Search","booksList","setBooksList","Fragment","components_SearchBar","searchTerm","get","items","map","item","volumeInfo","imageLinks","thumbnail","previewLink","components_BookInfo","Saved","deleteBook","Axios","delete","App","react_router_dom","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.80d72115.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBar = (props) => {\n    const [text, setText] = React.useState(\"\");\n    const handleOnClick = (e) => {\n        e.preventDefault();\n        console.log(\"text val \" + text);\n        props.handleSearch(text);\n    }\n    return (\n        <form onSubmit={handleOnClick}>\n            <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n            <button>Search</button>\n        </form>\n    )\n}\n\nexport default SearchBar;","import React from 'react';\nimport axios from 'axios';\nconst BookInfo = (props) => {\n\n    const [saved, setSaved] = React.useState(false);\n\n    const saveBook = () => {\n        const data = {\n            _id: props.id, \n            title: props.title, \n            authors: props.author, \n            description: props.description, \n            image: props.image, \n            link: props.link\n        };\n        console.log(data);\n        axios.post(\"api/books\", data).then((res)=>{\n            console.log('res' + res);\n            setSaved(true);\n        }); \n    }     \n\n    return (\n        <div>\n           <p>{props.title}</p>\n           <p>{props.author}</p>\n           <p>{props.description}</p>\n           <img src={props.image}/>\n           <button id=\"viewBtn\" onClick={props.onClickView}>View</button>\n           {props.infoType === \"search\" ? \n                <button id=\"saveBtn\" disabled={saved} onClick={()=>saveBook()}>Save</button> : \n                    <button id=\"deleteBtn\" onClick={()=>props.onClickDelete(props.id)}>Delete</button>\n                }\n        </div>\n    )\n}\n\n\nexport default BookInfo;\n","import React from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport BookInfo from './BookInfo';\n\nconst Search = (props) => {\n    const [booksList, setBooksList] = React.useState([]);\n\n    const getBooks = (searchTerm) => {\n        axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\"+ searchTerm)\n            .then(\n                (res) => {\n                    //console.log(res);\n                    const items = res.data.items.map((item)=>{return {\n                        \"id\": item.id,\n                        \"title\": item.volumeInfo.title,\n                        \"author\": item.volumeInfo.author,\n                        \"description\": item.volumeInfo.description,\n                        \"image\": item.volumeInfo.imageLinks.thumbnail,\n                        \"link\": item.volumeInfo.previewLink\n                    }});\n                    console.log(items);\n                    setBooksList(items);\n                }\n            );\n    };\n    \n    return (\n        <>\n        <div>\n           Book Search \n           <SearchBar handleSearch={getBooks}/>\n        </div>\n        <div>\n            {booksList.map((item)=>\n                <BookInfo \n                    infoType=\"search\"\n                    id={item.id}\n                    title={item.title} \n                    image={item.image} \n                    author={item.author} \n                    description={item.description} \n                    link={item.link}/>\n                //bookinfo에서 props.뒤에오는 이름 괄호 안에 들어가는 이름은 위의 res안에 const에서 받는 데이터 이름\n            )}\n        </div>\n        </>\n    )\n}\n\nexport default Search;","import React from \"react\";\nimport Axios from \"axios\";\nimport BookInfo from \"./BookInfo\";\nconst Saved = (props) =>{\n    const [booksList, setBooksList] = React.useState([]);\n\n    const getSaved = () => {\n        Axios.get(\"/api/books\")\n        .then(\n            (res) => {\n                //console.log(res);\n                const items = res.data.items.map((item)=>{return {\n                    \"id\": item._id,\n                    \"title\": item.title,\n                    \"author\": item.authors,\n                    \"description\": item.description,\n                    \"image\": item.image,\n                    \"link\": item.link\n                }});\n                console.log(items);\n                setBooksList(items); \n            }   \n        )};  \n\n        const deleteBook = (id) => {\n            Axios.delete(\"/api/books/\" + id)\n            .then(\n                (res) => {\n                    console.log(res);\n                    getSaved();\n                }\n            );\n        };\n\n    return (\n        <div>\n        {booksList.map((item)=>\n            <BookInfo \n                infoType=\"saved\"\n                onClickDelete={deleteBook}\n                id={item.id}\n                title={item.title} \n                image={item.image} \n                author={item.author} \n                description={item.description} \n                link={item.link}/>\n            //bookinfo에서 props.뒤에오는 이름 괄호 안에 들어가는 이름은 위의 res안에 const에서 받는 데이터 이름\n            )}\n        </div>\n    )\n} \n\nexport default Saved;","import React, { Component } from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Search from \"./components/Search\";\nimport Saved from \"./components/Saved\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" component={Search}/>\n        <Route exact path=\"/saved\" component={Saved}/>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}